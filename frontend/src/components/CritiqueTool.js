// CritiqueTool Component - AI-powered text analysis
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FileText, Zap, CheckCircle, AlertCircle, ArrowRight, Copy, Download } from 'lucide-react';
import { usePortfolioStore } from '../store/portfolioStore';
import { CritiqueAgent } from '../agents/CritiqueAgent';

export const CritiqueTool = () => {
  const [isExpanded, setIsExpanded] = useState(false);
  const {
    critiqueInput,
    critiqueType,
    critiqueResult,
    isLoading,
    setCritiqueInput,
    setCritiqueType,
    setCritiqueResult,
    getCritique
  } = usePortfolioStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!critiqueInput.trim()) return;
    
    await getCritique();
    setIsExpanded(true);
  };

  const handleExampleLoad = (type) => {
    const examples = CritiqueAgent.getExampleTexts();
    setCritiqueInput(examples[type]);
    setCritiqueType(type);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const downloadCritique = () => {
    if (!critiqueResult) return;
    
    const content = `Critique Analysis Report
Generated: ${new Date().toLocaleString()}
Analysis Type: ${critiqueResult.analysis_type}
Word Count: ${critiqueResult.word_count}

OVERALL SCORE: ${critiqueResult.overall_score || critiqueResult.overall_quality || critiqueResult.clarity_score}/10

STRENGTHS:
${(critiqueResult.strengths || []).map(s => `• ${s}`).join('\n')}

AREAS FOR IMPROVEMENT:
${(critiqueResult.weaknesses || []).map(w => `• ${w}`).join('\n')}

RECOMMENDATIONS:
${(critiqueResult.suggestions || []).map(s => `• ${s}`).join('\n')}

${critiqueResult.technical_assessment ? `TECHNICAL ASSESSMENT:\n${critiqueResult.technical_assessment}\n\n` : ''}
${critiqueResult.tone_analysis ? `TONE ANALYSIS:\n${critiqueResult.tone_analysis}\n\n` : ''}
${critiqueResult.missing_elements ? `MISSING ELEMENTS:\n${critiqueResult.missing_elements.map(e => `• ${e}`).join('\n')}\n\n` : ''}

---
Generated by Aneerban Saha's AI Portfolio Assistant
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `critique-analysis-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getScoreColor = (score) => {
    if (score >= 8) return 'text-green-600 dark:text-green-400';
    if (score >= 6) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getScoreBg = (score) => {
    if (score >= 8) return 'bg-green-100 dark:bg-green-900/30';
    if (score >= 6) return 'bg-yellow-100 dark:bg-yellow-900/30';
    return 'bg-red-100 dark:bg-red-900/30';
  };

  return (
    <section id="critique-tool" className="py-20 bg-gray-50 dark:bg-gray-900">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-12"
        >
          <div className="flex items-center justify-center gap-3 mb-6">
            <div className="p-3 bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/50 dark:to-pink-900/50 rounded-xl">
              <Zap className="w-8 h-8 text-purple-600 dark:text-purple-400" />
            </div>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">
              AI Critique Tool
            </h2>
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Get intelligent feedback on your resume, job descriptions, or any text. 
            Powered by advanced AI analysis.
          </p>
        </motion.div>

        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
          {/* Input Section */}
          <div className="p-6 border-b border-gray-200 dark:border-gray-700">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Type Selection */}
              <div className="flex flex-wrap gap-2">
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mr-4">
                  Analysis Type:
                </label>
                {['general', 'resume', 'job_description'].map((type) => (
                  <button
                    key={type}
                    type="button"
                    onClick={() => setCritiqueType(type)}
                    className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                      critiqueType === type
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                  >
                    {type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </button>
                ))}
              </div>

              {/* Text Input */}
              <div className="relative">
                <textarea
                  value={critiqueInput}
                  onChange={(e) => setCritiqueInput(e.target.value)}
                  placeholder="Paste your resume, job description, or any text you'd like me to analyze..."
                  rows={8}
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
                  disabled={isLoading}
                />
                <div className="absolute bottom-3 right-3 text-xs text-gray-400">
                  {critiqueInput.length} characters
                </div>
              </div>

              {/* Examples */}
              <div className="flex flex-wrap gap-2">
                <span className="text-sm text-gray-600 dark:text-gray-400 mr-2">Quick examples:</span>
                <button
                  type="button"
                  onClick={() => handleExampleLoad('resume')}
                  className="text-sm px-3 py-1 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors"
                >
                  Sample Resume
                </button>
                <button
                  type="button"
                  onClick={() => handleExampleLoad('job_description')}
                  className="text-sm px-3 py-1 bg-green-50 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded hover:bg-green-100 dark:hover:bg-green-900/50 transition-colors"
                >
                  Sample Job Description
                </button>
              </div>

              {/* Submit Button */}
              <motion.button
                type="submit"
                disabled={isLoading || !critiqueInput.trim()}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="w-full flex items-center justify-center gap-3 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              >
                {isLoading ? (
                  <>
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                    >
                      <Zap className="w-5 h-5" />
                    </motion.div>
                    Analyzing...
                  </>
                ) : (
                  <>
                    <FileText className="w-5 h-5" />
                    Get AI Critique
                    <ArrowRight className="w-5 h-5" />
                  </>
                )}
              </motion.button>
            </form>
          </div>

          {/* Results Section */}
          <AnimatePresence>
            {critiqueResult && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="p-6 space-y-6"
              >
                {/* Header with Score */}
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                    Analysis Results
                  </h3>
                  <div className="flex items-center gap-4">
                    {(critiqueResult.overall_score || critiqueResult.overall_quality || critiqueResult.clarity_score) && (
                      <div className={`px-4 py-2 rounded-lg ${getScoreBg(critiqueResult.overall_score || critiqueResult.overall_quality || critiqueResult.clarity_score)}`}>
                        <span className={`text-lg font-bold ${getScoreColor(critiqueResult.overall_score || critiqueResult.overall_quality || critiqueResult.clarity_score)}`}>
                          {critiqueResult.overall_score || critiqueResult.overall_quality || critiqueResult.clarity_score}/10
                        </span>
                        <span className="text-sm text-gray-600 dark:text-gray-400 ml-2">Overall</span>
                      </div>
                    )}
                    <button
                      onClick={downloadCritique}
                      className="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors"
                      title="Download report"
                    >
                      <Download className="w-5 h-5" />
                    </button>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6">
                  {/* Strengths */}
                  {critiqueResult.strengths && critiqueResult.strengths.length > 0 && (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
                        <h4 className="font-semibold text-gray-900 dark:text-white">Strengths</h4>
                      </div>
                      <div className="space-y-2">
                        {critiqueResult.strengths.map((strength, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                            <p className="text-sm text-gray-700 dark:text-gray-300">{strength}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Weaknesses */}
                  {critiqueResult.weaknesses && critiqueResult.weaknesses.length > 0 && (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <AlertCircle className="w-5 h-5 text-orange-600 dark:text-orange-400" />
                        <h4 className="font-semibold text-gray-900 dark:text-white">Areas for Improvement</h4>
                      </div>
                      <div className="space-y-2">
                        {critiqueResult.weaknesses.map((weakness, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0" />
                            <p className="text-sm text-gray-700 dark:text-gray-300">{weakness}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Suggestions */}
                {critiqueResult.suggestions && critiqueResult.suggestions.length > 0 && (
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <Zap className="w-5 h-5 text-purple-600 dark:text-purple-400" />
                      <h4 className="font-semibold text-gray-900 dark:text-white">Recommendations</h4>
                    </div>
                    <div className="grid gap-2">
                      {critiqueResult.suggestions.map((suggestion, index) => (
                        <div key={index} className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                          <p className="text-sm text-gray-700 dark:text-gray-300">{suggestion}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Additional Insights */}
                <div className="grid md:grid-cols-2 gap-4 pt-6 border-t border-gray-200 dark:border-gray-700">
                  {critiqueResult.technical_assessment && (
                    <div className="space-y-2">
                      <h5 className="font-medium text-gray-900 dark:text-white">Technical Assessment</h5>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{critiqueResult.technical_assessment}</p>
                    </div>
                  )}
                  {critiqueResult.tone_analysis && (
                    <div className="space-y-2">
                      <h5 className="font-medium text-gray-900 dark:text-white">Tone Analysis</h5>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{critiqueResult.tone_analysis}</p>
                    </div>
                  )}
                </div>

                {/* Clear Results */}
                <div className="flex justify-center pt-4">
                  <button
                    onClick={() => {
                      setCritiqueResult(null);
                      setCritiqueInput('');
                    }}
                    className="px-4 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors"
                  >
                    Clear Results
                  </button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Info Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="mt-8 text-center"
        >
          <p className="text-sm text-gray-600 dark:text-gray-400">
            This AI tool uses advanced language models to provide constructive feedback. 
            Results are suggestions and should be considered alongside human judgment.
          </p>
        </motion.div>
      </div>
    </section>
  );
};